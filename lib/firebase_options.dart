// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'dart:convert';
import 'package:flutter/services.dart' show rootBundle;
import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;

class EnvLoader {
  static Map<String, dynamic> _webEnv = {};

  /// ✅ Charge env.json sur Web ou .env ailleurs
  static Future<void> load() async {
    if (kIsWeb) {
      final data = await rootBundle.loadString('assets/env.json');
      _webEnv = json.decode(data);
    } else {
      await dotenv.load(fileName: ".env");
    }
  }

  /// ✅ Récupère la valeur (Web → _webEnv, Mobile → dotenv)
  static String get(String key) {
    return kIsWeb ? (_webEnv[key] ?? '') : (dotenv.env[key] ?? '');
  }
}

class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) return web;
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError('Firebase non configuré pour Linux.');
      default:
        throw UnsupportedError('Plateforme non supportée.');
    }
  }

  /// ✅ Web
  static FirebaseOptions get web => FirebaseOptions(
        apiKey: EnvLoader.get('FIREBASE_API_KEY'),
        appId: EnvLoader.get('FIREBASE_APP_ID'),
        messagingSenderId: EnvLoader.get('FIREBASE_MESSAGING_SENDER_ID'),
        projectId: EnvLoader.get('FIREBASE_PROJECT_ID'),
        storageBucket: EnvLoader.get('FIREBASE_STORAGE_BUCKET'),
        authDomain: EnvLoader.get('FIREBASE_AUTH_DOMAIN'),
      );

  /// ✅ Android
  static FirebaseOptions get android => FirebaseOptions(
        apiKey: EnvLoader.get('FIREBASE_API_KEY'),
        appId: EnvLoader.get('FIREBASE_APP_ID'),
        messagingSenderId: EnvLoader.get('FIREBASE_MESSAGING_SENDER_ID'),
        projectId: EnvLoader.get('FIREBASE_PROJECT_ID'),
        storageBucket: EnvLoader.get('FIREBASE_STORAGE_BUCKET'),
        authDomain: EnvLoader.get('FIREBASE_AUTH_DOMAIN'),
      );

  /// ✅ iOS
  static FirebaseOptions get ios => FirebaseOptions(
        apiKey: EnvLoader.get('FIREBASE_API_KEY'),
        appId: EnvLoader.get('FIREBASE_APP_ID'),
        messagingSenderId: EnvLoader.get('FIREBASE_MESSAGING_SENDER_ID'),
        projectId: EnvLoader.get('FIREBASE_PROJECT_ID'),
        storageBucket: EnvLoader.get('FIREBASE_STORAGE_BUCKET'),
        iosBundleId: EnvLoader.get('FIREBASE_IOS_BUNDLE_ID'),
      );

  /// ✅ macOS
  static FirebaseOptions get macos => FirebaseOptions(
        apiKey: EnvLoader.get('FIREBASE_API_KEY'),
        appId: EnvLoader.get('FIREBASE_APP_ID'),
        messagingSenderId: EnvLoader.get('FIREBASE_MESSAGING_SENDER_ID'),
        projectId: EnvLoader.get('FIREBASE_PROJECT_ID'),
        storageBucket: EnvLoader.get('FIREBASE_STORAGE_BUCKET'),
        iosBundleId: EnvLoader.get('FIREBASE_IOS_BUNDLE_ID'),
      );

  /// ✅ Windows
  static FirebaseOptions get windows => FirebaseOptions(
        apiKey: EnvLoader.get('FIREBASE_API_KEY'),
        appId: EnvLoader.get('FIREBASE_APP_ID'),
        messagingSenderId: EnvLoader.get('FIREBASE_MESSAGING_SENDER_ID'),
        projectId: EnvLoader.get('FIREBASE_PROJECT_ID'),
        storageBucket: EnvLoader.get('FIREBASE_STORAGE_BUCKET'),
        authDomain: EnvLoader.get('FIREBASE_AUTH_DOMAIN'),
      );
}
